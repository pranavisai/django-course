What is Django?
Free and open-course framework for building web apps with Python
Less time and less code for building websites.

Django Features: 
1. Admin site.
2. Object Relational Mapper.
3. Authentication.
4. Caching.

How Django works?

URL -> Uniform Resourse Location 
This can be a page, image, video or pdf

As soon as the request from client comes to the server it is taken up and a response is sent. This is carried out by the HTTP (Hypertext Transfer Protocol).
For each page being navigated each HTTP request is sent.

Two ways to send a response:
1. To completely send a HTML (HyperText Markup Language) page everytime a request is received.
2. To send only the data while the HTML page already loads on the client end.

What is the use? -> By doing this, the server has freed up space and can have more pages data to serve different types of requests.

Storefront location: /home/pranavisai/.local/share/virtualenvs/storefront-U_4UcZmF

pipfile -> It has the details of which version of python the project needs and what packages the application is dependent upon.
if * then it meaks on all the versions.

To activate the virtual environment we will use the python interpreter inside the virtual environment and not the one that is installed globally on the machine. Hence we use pipenv shell to open the environment.

django-admin is a utility that comes with django. We can see all commands we can use if we run it.

Modules in storefront:
1. settings -> defining the settings of the module.
2. urls -> defining the urls of the application.
3. wsgi and asgi -> used for deployment.

manage.py -> This is a wrapper around django admin. Instead of django-admin we can use manage.py as it knows about the settings of our project than django admin.
By default it will use 8000 port.

pipenv --venv -> to find the virtual path of our environment

Then we need to give in our view -> command palatte -> python interpreter -> pathlink/bin/python

In Installed apps:
everytime we install a app we need to declare it in the installed apps.
1. 'django.contrib.admin', -> for admin interface
2. 'django.contrib.auth', -> for authenticating users
3. 'django.contrib.contenttypes',
4. 'django.contrib.sessions', -> temporary memory on the server to manage users data (which is not used these days. can be ignored)
5. 'django.contrib.messages', -> for displaying one time notifications to the users
6. 'django.contrib.staticfiles', -> to serve static files like images, pdfs etc

migrations folder is for generating databade tables

1. admin module for how the admin interface is going to look like
2. apps module is to configure the application
3. models module is for pulling the databases and presenting to the users
4. tests module for writing the unit tests
5. views module is for request handling. takes the request and returns response.

The launch.json file is used to make the vs code understand how to run and debug the application.

We can also debug Django using the django debgu toolbar
